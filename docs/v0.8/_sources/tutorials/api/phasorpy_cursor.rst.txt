
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorials/api/phasorpy_cursor.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: xml

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorials_api_phasorpy_cursor.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorials_api_phasorpy_cursor.py:


Cursors
=======

An introduction to selecting phasor coordinates using cursors.

.. GENERATED FROM PYTHON SOURCE LINES 10-11

Import required modules, functions, and classes:

.. GENERATED FROM PYTHON SOURCE LINES 11-25

.. code-block:: Python


    from phasorpy.color import CATEGORICAL
    from phasorpy.cursor import (
        mask_from_circular_cursor,
        mask_from_elliptic_cursor,
        mask_from_polar_cursor,
        pseudo_color,
    )
    from phasorpy.datasets import fetch
    from phasorpy.filter import phasor_threshold
    from phasorpy.io import signal_from_lsm
    from phasorpy.phasor import phasor_from_signal
    from phasorpy.plot import PhasorPlot, plot_image








.. GENERATED FROM PYTHON SOURCE LINES 26-27

Open a hyperspectral dataset used throughout this tutorial:

.. GENERATED FROM PYTHON SOURCE LINES 27-34

.. code-block:: Python


    signal = signal_from_lsm(fetch('paramecium.lsm'))
    mean, real, imag = phasor_from_signal(signal, axis=0)

    # remove coordinates with zero intensity
    mean_thresholded, real, imag = phasor_threshold(mean, real, imag, mean_min=1)








.. GENERATED FROM PYTHON SOURCE LINES 35-39

Circular cursors
----------------

Use circular cursors to mask regions of interest in the phasor space:

.. GENERATED FROM PYTHON SOURCE LINES 39-48

.. code-block:: Python


    cursor_real = [-0.33, 0.54]
    cursor_imag = [-0.72, -0.74]
    radius = [0.2, 0.22]

    circular_mask = mask_from_circular_cursor(
        real, imag, cursor_real, cursor_imag, radius=radius
    )








.. GENERATED FROM PYTHON SOURCE LINES 49-50

Show the circular cursors in a phasor plot:

.. GENERATED FROM PYTHON SOURCE LINES 50-62

.. code-block:: Python


    plot = PhasorPlot(allquadrants=True, title='Circular cursors')
    plot.hist2d(real, imag, cmap='Greys')
    plot.cursor(
        cursor_real,
        cursor_imag,
        radius=radius,
        color=CATEGORICAL[:2],
        label=['cursor 0', 'cursor 1'],
    )
    plot.show()




.. image-sg:: /tutorials/api/images/sphx_glr_phasorpy_cursor_001.png
   :alt: Circular cursors
   :srcset: /tutorials/api/images/sphx_glr_phasorpy_cursor_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 63-64

The cursor masks can be blended to produce a pseudo-colored image:

.. GENERATED FROM PYTHON SOURCE LINES 65-72

.. code-block:: Python


    pseudo_color_image = pseudo_color(*circular_mask)

    plot_image(
        pseudo_color_image, title='Pseudo-color image from circular cursors'
    )




.. image-sg:: /tutorials/api/images/sphx_glr_phasorpy_cursor_002.png
   :alt: Pseudo-color image from circular cursors
   :srcset: /tutorials/api/images/sphx_glr_phasorpy_cursor_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 73-78

Elliptic cursors
----------------

Use elliptic cursors to mask more defined regions of interest in the
phasor space:

.. GENERATED FROM PYTHON SOURCE LINES 78-91

.. code-block:: Python


    radius = [0.1, 0.06]
    radius_minor = [0.3, 0.25]

    elliptic_mask = mask_from_elliptic_cursor(
        real,
        imag,
        cursor_real,
        cursor_imag,
        radius=radius,
        radius_minor=radius_minor,
    )








.. GENERATED FROM PYTHON SOURCE LINES 92-93

Show the elliptic cursors in a phasor plot:

.. GENERATED FROM PYTHON SOURCE LINES 93-106

.. code-block:: Python


    plot = PhasorPlot(allquadrants=True, title='Elliptic cursors')
    plot.hist2d(real, imag, cmap='Greys')
    plot.cursor(
        cursor_real,
        cursor_imag,
        radius=radius,
        radius_minor=radius_minor,
        color=CATEGORICAL[:2],
        label=['cursor 0', 'cursor 1'],
    )
    plot.show()




.. image-sg:: /tutorials/api/images/sphx_glr_phasorpy_cursor_003.png
   :alt: Elliptic cursors
   :srcset: /tutorials/api/images/sphx_glr_phasorpy_cursor_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 107-109

The mean intensity image can be used as a base layer to overlay
the masks from the elliptic cursors:

.. GENERATED FROM PYTHON SOURCE LINES 110-118

.. code-block:: Python


    pseudo_color_image = pseudo_color(*elliptic_mask, intensity=mean)

    plot_image(
        pseudo_color_image,
        title='Pseudo-color image from elliptic cursors and intensity',
    )




.. image-sg:: /tutorials/api/images/sphx_glr_phasorpy_cursor_004.png
   :alt: Pseudo-color image from elliptic cursors and intensity
   :srcset: /tutorials/api/images/sphx_glr_phasorpy_cursor_004.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 119-123

Polar cursors
-------------

Create a mask with two ranges of phase and modulation values:

.. GENERATED FROM PYTHON SOURCE LINES 123-133

.. code-block:: Python


    phase_min = [-2.27, -1.22]
    phase_max = [-1.57, -0.70]
    modulation_min = [0.7, 0.8]
    modulation_max = [0.9, 1.0]

    polar_mask = mask_from_polar_cursor(
        real, imag, phase_min, phase_max, modulation_min, modulation_max
    )








.. GENERATED FROM PYTHON SOURCE LINES 134-135

Show the polar cursors in a phasor plot:

.. GENERATED FROM PYTHON SOURCE LINES 135-148

.. code-block:: Python


    plot = PhasorPlot(allquadrants=True, title='Polar cursors')
    plot.hist2d(real, imag, cmap='Greys')
    plot.polar_cursor(
        phase=phase_min,
        phase_limit=phase_max,
        modulation=modulation_min,
        modulation_limit=modulation_max,
        color=CATEGORICAL[2:4],
        label=['cursor 0', 'cursor 1'],
    )
    plot.show()




.. image-sg:: /tutorials/api/images/sphx_glr_phasorpy_cursor_005.png
   :alt: Polar cursors
   :srcset: /tutorials/api/images/sphx_glr_phasorpy_cursor_005.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 149-152

The thresholded mean intensity image can be used as a base layer to
overlay the masks from the polar cursors. Values below the threshold are
transparent (white):

.. GENERATED FROM PYTHON SOURCE LINES 152-162

.. code-block:: Python


    pseudo_color_image = pseudo_color(
        *polar_mask, intensity=mean_thresholded, colors=CATEGORICAL[2:]
    )

    plot_image(
        pseudo_color_image,
        title='Pseudo-color image from\npolar cursors and thresholded intensity',
    )




.. image-sg:: /tutorials/api/images/sphx_glr_phasorpy_cursor_006.png
   :alt: Pseudo-color image from polar cursors and thresholded intensity
   :srcset: /tutorials/api/images/sphx_glr_phasorpy_cursor_006.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 163-166

sphinx_gallery_thumbnail_number = 1
mypy: allow-untyped-defs, allow-untyped-calls
mypy: disable-error-code="arg-type"


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.761 seconds)


.. _sphx_glr_download_tutorials_api_phasorpy_cursor.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: phasorpy_cursor.ipynb <phasorpy_cursor.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: phasorpy_cursor.py <phasorpy_cursor.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: phasorpy_cursor.zip <phasorpy_cursor.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
