
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorials/phasorpy_introduction.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: xml

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorials_phasorpy_introduction.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorials_phasorpy_introduction.py:


Introduction to PhasorPy
========================

An introduction to using the PhasorPy library.

PhasorPy is an open-source Python library for the analysis of fluorescence
lifetime and hyperspectral images using the :doc:`/phasor_approach`.

Using the PhasorPy library requires familiarity with the phasor approach,
image processing, array programming, and Python.

.. GENERATED FROM PYTHON SOURCE LINES 16-46

Install Python
--------------

An installation of Python version 3.10 or higher is required to use the
PhasorPy library.
Python is an easy to learn, powerful programming language.
Python installers can be obtained from, for example,
`Python.org <https://www.python.org/downloads/>`_ or
`Anaconda.com <https://www.anaconda.com/>`_.
Refer to the `Python Tutorial <https://docs.python.org/3/tutorial/>`_
for an introduction to Python.

Install PhasorPy
----------------

To download and install the PhasorPy library and all its dependencies from
the `Python Package Index <https://pypi.org/project/phasorpy/>`_ (PyPI),
run the following command on a command prompt, shell, or terminal::

    python -m pip install -U "phasorpy[all]"

The development version of PhasorPy can be installed instead from the
latest source code on GitHub. This requires a C compiler, such as
XCode, Visual Studio, or gcc, to be installed::

    python -m pip install -U git+https://github.com/phasorpy/phasorpy.git

Update optional dependencies as needed::

    python -m pip install -U lfdfiles sdtfile ptufile

.. GENERATED FROM PYTHON SOURCE LINES 48-53

Import phasorpy
---------------

Start the Python interpreter, import the ``phasorpy`` package,
and print its version:

.. GENERATED FROM PYTHON SOURCE LINES 53-58

.. code-block:: Python


    import phasorpy

    print(phasorpy.__version__)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    0.2.dev




.. GENERATED FROM PYTHON SOURCE LINES 59-62

Besides the PhasorPy library, the `numpy <https://numpy.org/>`_ and
`matplotlib <https://matplotlib.org/>`_ libraries are used for
array computing and plotting throughout this tutorial:

.. GENERATED FROM PYTHON SOURCE LINES 62-69

.. code-block:: Python


    import numpy
    import tifffile  # TODO: from phasorpy.io import read_ometiff
    from matplotlib import pyplot

    from phasorpy.datasets import fetch








.. GENERATED FROM PYTHON SOURCE LINES 70-87

Read signal from file
---------------------

The :py:mod:`phasorpy.io` module provides functions to read time-resolved
and hyperspectral image stacks and metadata from many file formats used
in microscopy, for example PicoQuant PTU, OME-TIFF, Zeiss LSM, and files
written by SimFCS software.
However, any other means that yields image stacks in numpy-array compatible
form can be used instead.
Image stacks, which may have any number of dimensions, are referred to as
``signal`` in the PhasorPy library.

The :py:mod:`phasorpy.datasets` module provides access to various sample
files. For example, an Imspector TIFF file from the
`FLUTE <https://zenodo.org/records/8046636>`_  project containing a
time-correlated single photon counting (TCSPC) histogram
of a zebrafish embryo at day 3, acquired at 80 MHz:

.. GENERATED FROM PYTHON SOURCE LINES 87-94

.. code-block:: Python



    signal = tifffile.imread(fetch('Embryo.tif'))
    frequency = 80.11  # MHz; from the XML metadata in the file

    print(signal.shape, signal.dtype)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    (56, 512, 512) uint16




.. GENERATED FROM PYTHON SOURCE LINES 95-96

Plot the spatial and histogram averages:

.. GENERATED FROM PYTHON SOURCE LINES 96-101

.. code-block:: Python


    from phasorpy.plot import plot_signal_image

    plot_signal_image(signal, axis=0)




.. image-sg:: /tutorials/images/sphx_glr_phasorpy_introduction_001.png
   :alt: mean, axis 0, mean
   :srcset: /tutorials/images/sphx_glr_phasorpy_introduction_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 102-119

Calculate phasor coordinates
----------------------------

The :py:mod:`phasorpy.phasor` module provides functions to calculate,
calibrate, filter, and convert phasor coordinates.

Phasor coordinates are the real and imaginary components of the complex
numbers returned by a real forward Digital Fourier Transform (DFT)
of a signal at certain harmonics (multiples of the fundamental frequency),
normalized by the mean intensity (the zeroth harmonic).
Phasor coordinates are named ``real`` and ``imag`` in the PhasorPy library.
In literature and other software, they are also known as
:math:`G` and :math:`S` or :math:`a` and :math:`b` (as in :math:`a + bi`).

Phasor coordinates of the first harmonic are calculated from the signal,
a TCSPC histogram in this case.
The histogram samples are in the first dimension (`axis=0`):

.. GENERATED FROM PYTHON SOURCE LINES 119-124

.. code-block:: Python


    from phasorpy.phasor import phasor_from_signal

    mean, real, imag = phasor_from_signal(signal, axis=0)








.. GENERATED FROM PYTHON SOURCE LINES 125-128

The phasor coordinates are undefined if the mean intensity is zero.
In that case, the arrays contain special ``NaN`` (Not a Number) values,
which are ignored in further analysis:

.. GENERATED FROM PYTHON SOURCE LINES 128-131

.. code-block:: Python


    print(real[:4, :4])





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [[        nan         nan -0.27292411         nan]
     [        nan         nan  0.16095963         nan]
     [        nan         nan  0.90096887         nan]
     [        nan  0.6234898          nan         nan]]




.. GENERATED FROM PYTHON SOURCE LINES 132-133

Plot the calculated phasor coordinates:

.. GENERATED FROM PYTHON SOURCE LINES 133-138

.. code-block:: Python


    from phasorpy.plot import plot_phasor_image

    plot_phasor_image(mean, real, imag, title='Sample')




.. image-sg:: /tutorials/images/sphx_glr_phasorpy_introduction_002.png
   :alt: Sample, mean, G, real, S, imag
   :srcset: /tutorials/images/sphx_glr_phasorpy_introduction_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 139-142

By default, only the phasor coordinates at the first harmonic are calculated.
However, only when the phasor coordinates at all harmonics are considered
(including the mean intensity) is the signal completely described:

.. GENERATED FROM PYTHON SOURCE LINES 142-154

.. code-block:: Python


    from phasorpy.phasor import phasor_to_signal

    phasor_all_harmonics = phasor_from_signal(signal, axis=0, harmonic='all')
    reconstructed_signal = phasor_to_signal(
        *phasor_all_harmonics, axis=0, samples=signal.shape[0]
    )

    numpy.testing.assert_allclose(
        numpy.nan_to_num(reconstructed_signal), signal, atol=1e-3
    )








.. GENERATED FROM PYTHON SOURCE LINES 155-169

Calibrate phasor coordinates
----------------------------

The signals from time-resolved measurements are convoluted with an
instrument response function, causing the phasor-coordinates to be
phase-shifted and modulated (scaled) by unknown amounts.
The phasor coordinates must therefore be calibrated with coordinates
obtained from a reference standard of known lifetime, acquired with
the same instrument settings.

In this case, a homogeneous solution of Fluorescein with a lifetime of
4.2 ns was imaged.

Read the signal of the reference measurement from a file:

.. GENERATED FROM PYTHON SOURCE LINES 169-172

.. code-block:: Python


    reference_signal = tifffile.imread(fetch('Fluorescein_Embryo.tif'))








.. GENERATED FROM PYTHON SOURCE LINES 173-174

Calculate phasor coordinates from the measured reference signal:

.. GENERATED FROM PYTHON SOURCE LINES 174-179

.. code-block:: Python


    reference_mean, reference_real, reference_imag = phasor_from_signal(
        reference_signal, axis=0
    )








.. GENERATED FROM PYTHON SOURCE LINES 180-181

Show the calculated reference phasor coordinates:

.. GENERATED FROM PYTHON SOURCE LINES 181-186

.. code-block:: Python


    plot_phasor_image(
        reference_mean, reference_real, reference_imag, title='Reference'
    )




.. image-sg:: /tutorials/images/sphx_glr_phasorpy_introduction_003.png
   :alt: Reference, mean, G, real, S, imag
   :srcset: /tutorials/images/sphx_glr_phasorpy_introduction_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 187-189

Calibrate the raw phasor coordinates with the reference coordinates of known
lifetime (Fluorescein, 4.2 ns):

.. GENERATED FROM PYTHON SOURCE LINES 189-201

.. code-block:: Python


    from phasorpy.phasor import phasor_calibrate

    real, imag = phasor_calibrate(
        real,
        imag,
        reference_real,
        reference_imag,
        frequency=frequency,
        lifetime=4.2,
    )








.. GENERATED FROM PYTHON SOURCE LINES 202-203

Show the calibrated phasor coordinates:

.. GENERATED FROM PYTHON SOURCE LINES 203-206

.. code-block:: Python


    plot_phasor_image(mean, real, imag, title='Calibrated')




.. image-sg:: /tutorials/images/sphx_glr_phasorpy_introduction_004.png
   :alt: Calibrated, mean, G, real, S, imag
   :srcset: /tutorials/images/sphx_glr_phasorpy_introduction_004.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 207-212

The phasor coordinates are now located in the first quadrant, except for
some with low signal to noise level.

If necessary, the calibration can be undone/reversed using the
same reference:

.. GENERATED FROM PYTHON SOURCE LINES 212-229

.. code-block:: Python


    uncalibrated_real, uncalibrated_imag = phasor_calibrate(
        real,
        imag,
        reference_real,
        reference_imag,
        frequency=frequency,
        lifetime=4.2,
        reverse=True,
    )

    numpy.testing.assert_allclose(
        (mean, uncalibrated_real, uncalibrated_imag),
        phasor_from_signal(signal, axis=0),
        atol=1e-3,
    )








.. GENERATED FROM PYTHON SOURCE LINES 230-235

Filter phasor coordinates
-------------------------

Applying median filter to the calibrated phasor coordinates,
often multiple times, improves contrast and reduces noise:

.. GENERATED FROM PYTHON SOURCE LINES 235-240

.. code-block:: Python


    from phasorpy.phasor import phasor_filter

    real, imag = phasor_filter(real, imag, method='median', size=3, repeat=2)








.. GENERATED FROM PYTHON SOURCE LINES 241-243

Pixels with low intensities are commonly excluded from analysis and
visualization of phasor coordinates:

.. GENERATED FROM PYTHON SOURCE LINES 243-248

.. code-block:: Python


    from phasorpy.phasor import phasor_threshold

    mean, real, imag = phasor_threshold(mean, real, imag, mean_min=1)








.. GENERATED FROM PYTHON SOURCE LINES 249-250

Show the calibrated, filtered phasor coordinates:

.. GENERATED FROM PYTHON SOURCE LINES 250-255

.. code-block:: Python


    plot_phasor_image(
        mean, real, imag, title='Calibrated, filtered phasor coordinates'
    )




.. image-sg:: /tutorials/images/sphx_glr_phasorpy_introduction_005.png
   :alt: Calibrated, filtered phasor coordinates, mean, G, real, S, imag
   :srcset: /tutorials/images/sphx_glr_phasorpy_introduction_005.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 256-265

Store phasor coordinates
------------------------

Phasor coordinates and select metadata can be exported to
`OME-TIFF <https://ome-model.readthedocs.io/en/stable/ome-tiff/>`_
formatted files, which are compatible with Bio-Formats and Fiji.

Write the calibrated and filtered phasor coordinates, and frequency to an
OME-TIFF file:

.. GENERATED FROM PYTHON SOURCE LINES 265-281

.. code-block:: Python


    from phasorpy.io import phasor_from_ometiff, phasor_to_ometiff

    phasor_to_ometiff(
        'phasors.ome.tif',
        mean,
        real,
        imag,
        frequency=frequency,
        harmonic=1,
        description=(
            'Phasor coordinates of a zebrafish embryo at day 3, '
            'calibrated, median-filtered, and thresholded.'
        ),
    )








.. GENERATED FROM PYTHON SOURCE LINES 282-283

Read the phasor coordinates and metadata back from the OME-TIFF file:

.. GENERATED FROM PYTHON SOURCE LINES 283-292

.. code-block:: Python


    mean_, real_, imag_, attrs = phasor_from_ometiff('phasors.ome.tif')

    numpy.allclose(real_, real)
    assert real_.dtype == numpy.float32
    assert attrs['frequency'] == frequency
    assert attrs['harmonic'] == 1
    assert attrs['description'].startswith('Phasor coordinates of')








.. GENERATED FROM PYTHON SOURCE LINES 293-294

The functions also transparently work with multi-harmonic phasor coordinates.

.. GENERATED FROM PYTHON SOURCE LINES 296-304

Plot phasor coordinates
-----------------------

The :py:mod:`phasorpy.plot` module provides functions and classes for
plotting phasor and polar coordinates.

Large number of phasor coordinates, such as obtained from imaging,
are commonly visualized as 2D histograms:

.. GENERATED FROM PYTHON SOURCE LINES 304-313

.. code-block:: Python


    from phasorpy.plot import PhasorPlot

    phasorplot = PhasorPlot(
        frequency=frequency, title='Calibrated, filtered phasor coordinates'
    )
    phasorplot.hist2d(real, imag)
    phasorplot.show()




.. image-sg:: /tutorials/images/sphx_glr_phasorpy_introduction_006.png
   :alt: Calibrated, filtered phasor coordinates
   :srcset: /tutorials/images/sphx_glr_phasorpy_introduction_006.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 314-319

The calibrated phasor coordinates of all pixels lie inside the universal
semicircle (on which theoretically the phasor coordinates of all single
exponential lifetimes are located).
That means, all pixels contain mixtures of signals from multiple lifetime
components.

.. GENERATED FROM PYTHON SOURCE LINES 321-322

For comparison, the uncalibrated, unfiltered phasor coordinates:

.. GENERATED FROM PYTHON SOURCE LINES 322-327

.. code-block:: Python


    phasorplot = PhasorPlot(allquadrants=True, title='Raw phasor coordinates')
    phasorplot.hist2d(uncalibrated_real, uncalibrated_imag)
    phasorplot.show()




.. image-sg:: /tutorials/images/sphx_glr_phasorpy_introduction_007.png
   :alt: Raw phasor coordinates
   :srcset: /tutorials/images/sphx_glr_phasorpy_introduction_007.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 328-330

Select phasor coordinates
-------------------------

.. GENERATED FROM PYTHON SOURCE LINES 330-333

.. code-block:: Python


    # TODO








.. GENERATED FROM PYTHON SOURCE LINES 334-336

Component analysis
------------------

.. GENERATED FROM PYTHON SOURCE LINES 336-339

.. code-block:: Python


    # TODO








.. GENERATED FROM PYTHON SOURCE LINES 340-349

Spectral phasors
----------------

Phasor coordinates can be calculated from hyperspectral images (acquired
at many equidistant emission wavelengths) and processed in much the same
way as time-resolved signals. Calibration is not necessary.

Open a hyperspectral dataset acquired with a laser scanning microscope
at 30 emission wavelengths:

.. GENERATED FROM PYTHON SOURCE LINES 349-356

.. code-block:: Python


    from phasorpy.io import read_lsm

    hyperspectral_signal = read_lsm(fetch('paramecium.lsm'))

    plot_signal_image(hyperspectral_signal, axis=0, title='Hyperspectral image')




.. image-sg:: /tutorials/images/sphx_glr_phasorpy_introduction_008.png
   :alt: Hyperspectral image, mean, axis 0, mean
   :srcset: /tutorials/images/sphx_glr_phasorpy_introduction_008.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 357-359

Calculate phasor coordinates at the first harmonic and filter out
pixels with low intensities:

.. GENERATED FROM PYTHON SOURCE LINES 359-363

.. code-block:: Python


    mean, real, imag = phasor_from_signal(hyperspectral_signal, axis=0)
    _, real, imag = phasor_threshold(mean, real, imag, mean_min=1)








.. GENERATED FROM PYTHON SOURCE LINES 364-366

Plot the phasor coordinates as a two-dimensional histogram and select two
clusters in the phasor plot by means of elliptical cursors:

.. GENERATED FROM PYTHON SOURCE LINES 366-387

.. code-block:: Python


    from phasorpy.color import CATEGORICAL

    cursors_real = [-0.33, 0.54]
    cursors_imag = [-0.72, -0.74]
    radius = [0.1, 0.06]
    radius_minor = [0.3, 0.25]

    phasorplot = PhasorPlot(allquadrants=True, title='Spectral phasor plot')
    phasorplot.hist2d(real, imag, cmap='Greys')
    for i in range(len(cursors_real)):
        phasorplot.cursor(
            cursors_real[i],
            cursors_imag[i],
            radius=radius[i],
            radius_minor=radius_minor[i],
            color=CATEGORICAL[i],
            linestyle='-',
        )
    phasorplot.show()




.. image-sg:: /tutorials/images/sphx_glr_phasorpy_introduction_009.png
   :alt: Spectral phasor plot
   :srcset: /tutorials/images/sphx_glr_phasorpy_introduction_009.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 388-389

Use the elliptic cursors to mask regions of interest in the phasor space:

.. GENERATED FROM PYTHON SOURCE LINES 389-401

.. code-block:: Python


    from phasorpy.cursors import mask_from_elliptic_cursor

    elliptic_masks = mask_from_elliptic_cursor(
        real,
        imag,
        cursors_real,
        cursors_imag,
        radius=radius,
        radius_minor=radius_minor,
    )








.. GENERATED FROM PYTHON SOURCE LINES 402-404

Plot a pseudo-color image, composited from the elliptic cursor masks and
the mean intensity image:

.. GENERATED FROM PYTHON SOURCE LINES 404-414

.. code-block:: Python


    from phasorpy.cursors import pseudo_color

    pseudo_color_image = pseudo_color(*elliptic_masks, intensity=mean)

    fig, ax = pyplot.subplots()
    ax.set_title('Pseudo-color image from circular cursors')
    ax.imshow(pseudo_color_image)
    pyplot.show()




.. image-sg:: /tutorials/images/sphx_glr_phasorpy_introduction_010.png
   :alt: Pseudo-color image from circular cursors
   :srcset: /tutorials/images/sphx_glr_phasorpy_introduction_010.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 415-419

Appendix
--------

Print information about Python interpreter and installed packages:

.. GENERATED FROM PYTHON SOURCE LINES 419-422

.. code-block:: Python


    print(phasorpy.versions())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Python-3.12.6
    phasorpy-0.2.dev
    numpy-2.1.1
    tifffile-2024.9.20
    imagecodecs-n/a
    lfdfiles-2024.9.15
    sdtfile-2024.5.24
    ptufile-2024.9.14
    matplotlib-3.9.2
    scipy-1.14.1
    skimage-n/a
    sklearn-n/a
    pandas-2.2.3
    xarray-2024.9.0
    click-8.1.7
    pooch-v1.8.2




.. GENERATED FROM PYTHON SOURCE LINES 423-426

sphinx_gallery_thumbnail_number = -5
mypy: allow-untyped-defs, allow-untyped-calls
mypy: disable-error-code="arg-type"


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 13.655 seconds)


.. _sphx_glr_download_tutorials_phasorpy_introduction.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: phasorpy_introduction.ipynb <phasorpy_introduction.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: phasorpy_introduction.py <phasorpy_introduction.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: phasorpy_introduction.zip <phasorpy_introduction.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
