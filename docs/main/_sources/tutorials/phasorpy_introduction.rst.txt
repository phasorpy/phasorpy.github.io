
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorials/phasorpy_introduction.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: xml

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorials_phasorpy_introduction.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorials_phasorpy_introduction.py:


Introduction to PhasorPy
========================

An introduction to using the PhasorPy library.

PhasorPy is an open-source Python library for the analysis of fluorescence
lifetime and hyperspectral images using the :doc:`/phasor_approach`.

Using the PhasorPy library requires familiarity with the phasor approach,
image processing, array programming, and Python.

.. GENERATED FROM PYTHON SOURCE LINES 16-55

Install Python
--------------

An installation of Python version 3.11 or higher is required to use the
PhasorPy library.
Python is an easy to learn, powerful programming language.
Python installers can be obtained from, for example,
`Python.org <https://www.python.org/downloads/>`_ or
`Anaconda.com <https://www.anaconda.com/>`_.
Alternatively, Python can be used via
`Google Colab <https://colab.research.google.com/>`_,
a free, cloud-based service.
Refer to the `Python Tutorial <https://docs.python.org/3/tutorial/>`_
for an introduction to Python.

Install PhasorPy
----------------

To download and install the PhasorPy library and all its dependencies from
the `Python Package Index <https://pypi.org/project/phasorpy/>`_ (PyPI),
run the following command on a command prompt, shell, or terminal::

    python -m pip install -U "phasorpy[all]"

Alternatively, PhasorPy can be installed via
`conda-forge <https://anaconda.org/conda-forge/phasorpy>`_ in an Anaconda
environment::

   conda install conda-forge::phasorpy

The development version of PhasorPy can be installed instead from the
latest source code on GitHub. This requires a C compiler, such as
XCode, Visual Studio, or gcc, to be installed::

    python -m pip install -U git+https://github.com/phasorpy/phasorpy.git

Update optional dependencies as needed::

    python -m pip install -U lfdfiles sdtfile ptufile

.. GENERATED FROM PYTHON SOURCE LINES 57-62

Import phasorpy
---------------

Start the Python interpreter, import the ``phasorpy`` package,
and print its version:

.. GENERATED FROM PYTHON SOURCE LINES 62-67

.. code-block:: Python


    import phasorpy

    print(phasorpy.__version__)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    0.7.dev0




.. GENERATED FROM PYTHON SOURCE LINES 68-70

Besides the PhasorPy library, the `numpy <https://numpy.org/>`_ library
is used for array computing throughout this tutorial:

.. GENERATED FROM PYTHON SOURCE LINES 70-73

.. code-block:: Python


    import numpy








.. GENERATED FROM PYTHON SOURCE LINES 74-91

Read signal from file
---------------------

The :py:mod:`phasorpy.io` module provides functions to read time-resolved
and hyperspectral image stacks and metadata from many file formats used
in microscopy, for example PicoQuant PTU, OME-TIFF, Zeiss LSM, and files
written by SimFCS software.
However, any other means that yields image stacks in numpy-array compatible
form can be used instead.
Image stacks, which may have any number of dimensions, are referred to as
``signal`` in the PhasorPy library.

The :py:mod:`phasorpy.datasets` module provides access to various sample
files. For example, an ImSpector TIFF file from the
`FLUTE <https://zenodo.org/records/8046636>`_  project containing a
time-correlated single photon counting (TCSPC) histogram
of a zebrafish embryo at day 3, acquired at 80.11 MHz:

.. GENERATED FROM PYTHON SOURCE LINES 91-100

.. code-block:: Python


    from phasorpy.datasets import fetch
    from phasorpy.io import signal_from_imspector_tiff

    signal = signal_from_imspector_tiff(fetch('Embryo.tif'))
    frequency = signal.attrs['frequency']

    print(signal.shape, signal.dtype)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    (56, 512, 512) uint16




.. GENERATED FROM PYTHON SOURCE LINES 101-103

Plot the spatial and histogram averages. The histogram bins are in the
first dimension of the signal array (`axis='H'` or `axis=0`):

.. GENERATED FROM PYTHON SOURCE LINES 103-108

.. code-block:: Python


    from phasorpy.plot import plot_signal_image

    plot_signal_image(signal, axis='H', xlabel='delay-time (ns)')




.. image-sg:: /tutorials/images/sphx_glr_phasorpy_introduction_001.png
   :alt: axis=0 'H', mean
   :srcset: /tutorials/images/sphx_glr_phasorpy_introduction_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 109-125

Calculate phasor coordinates
----------------------------

The :py:mod:`phasorpy.phasor` module provides functions to calculate,
filter, and convert phasor coordinates.

Phasor coordinates are the real and imaginary components of the complex
numbers returned by a real forward Digital Fourier Transform (DFT)
of a signal at certain harmonics (multiples of the fundamental frequency),
normalized by the mean intensity (the zeroth harmonic).
Phasor coordinates are named ``real`` and ``imag`` in the PhasorPy library.
In literature and other software, they are also known as
:math:`G` and :math:`S` or :math:`a` and :math:`b` (as in :math:`a + bi`).

Phasor coordinates of the first harmonic are calculated from the signal
over the axis containing the TCSPC histogram bins (`axis='H'` or `axis=0`):

.. GENERATED FROM PYTHON SOURCE LINES 125-130

.. code-block:: Python


    from phasorpy.phasor import phasor_from_signal

    mean, real, imag = phasor_from_signal(signal, axis='H')








.. GENERATED FROM PYTHON SOURCE LINES 131-134

The phasor coordinates are undefined if the mean intensity is zero.
In that case, the arrays contain special ``NaN`` (Not a Number) values,
which are ignored in further analysis:

.. GENERATED FROM PYTHON SOURCE LINES 134-137

.. code-block:: Python


    print(real[:4, :4])





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [[        nan         nan -0.27292411         nan]
     [        nan         nan  0.16095963         nan]
     [        nan         nan  0.90096887         nan]
     [        nan  0.6234898          nan         nan]]




.. GENERATED FROM PYTHON SOURCE LINES 138-139

Plot the calculated phasor coordinates:

.. GENERATED FROM PYTHON SOURCE LINES 139-144

.. code-block:: Python


    from phasorpy.plot import plot_phasor_image

    plot_phasor_image(mean, real, imag, title='Sample')




.. image-sg:: /tutorials/images/sphx_glr_phasorpy_introduction_002.png
   :alt: Sample, mean, G, real, S, imag
   :srcset: /tutorials/images/sphx_glr_phasorpy_introduction_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 145-148

By default, only the phasor coordinates at the first harmonic are calculated.
However, only when the phasor coordinates at all harmonics are considered
(including the mean intensity) is the signal completely described:

.. GENERATED FROM PYTHON SOURCE LINES 148-160

.. code-block:: Python


    from phasorpy.phasor import phasor_to_signal

    phasor_all_harmonics = phasor_from_signal(signal, axis=0, harmonic='all')
    reconstructed_signal = phasor_to_signal(
        *phasor_all_harmonics, axis=0, samples=signal.shape[0]
    )

    numpy.testing.assert_allclose(
        numpy.nan_to_num(reconstructed_signal), signal, atol=1e-3
    )








.. GENERATED FROM PYTHON SOURCE LINES 161-178

Calibrate phasor coordinates
----------------------------

The :py:mod:`phasorpy.lifetime` module provides functions to calculate,
convert, and calibrate phasor coordinates of fluorescence lifetimes.

The signals from time-resolved measurements are convoluted with an
instrument response function, causing the phasor-coordinates to be
phase-shifted and modulated (scaled) by unknown amounts.
The phasor coordinates must therefore be calibrated with coordinates
obtained from a reference standard of known lifetime, acquired with
the same instrument settings.

In this case, a homogeneous solution of Fluorescein with a lifetime of
4.2 ns was imaged.

Read the signal of the reference measurement from a file:

.. GENERATED FROM PYTHON SOURCE LINES 178-182

.. code-block:: Python


    reference_signal = signal_from_imspector_tiff(fetch('Fluorescein_Embryo.tif'))
    assert reference_signal.attrs['frequency'] == frequency








.. GENERATED FROM PYTHON SOURCE LINES 183-184

Calculate phasor coordinates from the measured reference signal:

.. GENERATED FROM PYTHON SOURCE LINES 184-189

.. code-block:: Python


    reference_mean, reference_real, reference_imag = phasor_from_signal(
        reference_signal, axis=0
    )








.. GENERATED FROM PYTHON SOURCE LINES 190-191

Show the calculated reference phasor coordinates:

.. GENERATED FROM PYTHON SOURCE LINES 191-196

.. code-block:: Python


    plot_phasor_image(
        reference_mean, reference_real, reference_imag, title='Reference'
    )




.. image-sg:: /tutorials/images/sphx_glr_phasorpy_introduction_003.png
   :alt: Reference, mean, G, real, S, imag
   :srcset: /tutorials/images/sphx_glr_phasorpy_introduction_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 197-199

Calibrate the raw phasor coordinates with the reference coordinates of known
lifetime (Fluorescein, 4.2 ns):

.. GENERATED FROM PYTHON SOURCE LINES 199-212

.. code-block:: Python


    from phasorpy.lifetime import phasor_calibrate

    real, imag = phasor_calibrate(
        real,
        imag,
        reference_mean,
        reference_real,
        reference_imag,
        frequency=frequency,
        lifetime=4.2,
    )








.. GENERATED FROM PYTHON SOURCE LINES 213-214

Show the calibrated phasor coordinates:

.. GENERATED FROM PYTHON SOURCE LINES 214-217

.. code-block:: Python


    plot_phasor_image(mean, real, imag, title='Calibrated')




.. image-sg:: /tutorials/images/sphx_glr_phasorpy_introduction_004.png
   :alt: Calibrated, mean, G, real, S, imag
   :srcset: /tutorials/images/sphx_glr_phasorpy_introduction_004.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 218-223

The phasor coordinates are now located in the first quadrant, except for
some with low signal to noise level.

If necessary, the calibration can be undone/reversed using the
same reference:

.. GENERATED FROM PYTHON SOURCE LINES 223-241

.. code-block:: Python


    uncalibrated_real, uncalibrated_imag = phasor_calibrate(
        real,
        imag,
        reference_mean,
        reference_real,
        reference_imag,
        frequency=frequency,
        lifetime=4.2,
        reverse=True,
    )

    numpy.testing.assert_allclose(
        (mean, uncalibrated_real, uncalibrated_imag),
        phasor_from_signal(signal, axis=0),
        atol=1e-3,
    )








.. GENERATED FROM PYTHON SOURCE LINES 242-249

Filter phasor coordinates
-------------------------

Applying median filter to the calibrated phasor coordinates,
often multiple times, improves contrast and reduces noise.
The filter is applied independently to the real and imaginary components,
but not to the signal average:

.. GENERATED FROM PYTHON SOURCE LINES 249-254

.. code-block:: Python


    from phasorpy.phasor import phasor_filter_median

    mean, real, imag = phasor_filter_median(mean, real, imag, size=3, repeat=2)








.. GENERATED FROM PYTHON SOURCE LINES 255-257

Pixels with low intensities are commonly excluded from analysis and
visualization of phasor coordinates:

.. GENERATED FROM PYTHON SOURCE LINES 257-262

.. code-block:: Python


    from phasorpy.phasor import phasor_threshold

    mean, real, imag = phasor_threshold(mean, real, imag, mean_min=1)








.. GENERATED FROM PYTHON SOURCE LINES 263-264

Show the calibrated, filtered phasor coordinates:

.. GENERATED FROM PYTHON SOURCE LINES 264-269

.. code-block:: Python


    plot_phasor_image(
        mean, real, imag, title='Calibrated, filtered phasor coordinates'
    )




.. image-sg:: /tutorials/images/sphx_glr_phasorpy_introduction_005.png
   :alt: Calibrated, filtered phasor coordinates, mean, G, real, S, imag
   :srcset: /tutorials/images/sphx_glr_phasorpy_introduction_005.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 270-279

Store phasor coordinates
------------------------

Phasor coordinates and select metadata can be exported to
`OME-TIFF <https://ome-model.readthedocs.io/en/stable/ome-tiff/>`_
formatted files, which are compatible with Bio-Formats and Fiji.

Write the calibrated and filtered phasor coordinates, and frequency to an
OME-TIFF file:

.. GENERATED FROM PYTHON SOURCE LINES 279-295

.. code-block:: Python


    from phasorpy.io import phasor_from_ometiff, phasor_to_ometiff

    phasor_to_ometiff(
        'phasors.ome.tif',
        mean,
        real,
        imag,
        frequency=frequency,
        harmonic=1,
        description=(
            'Phasor coordinates of a zebrafish embryo at day 3, '
            'calibrated, median-filtered, and thresholded.'
        ),
    )








.. GENERATED FROM PYTHON SOURCE LINES 296-297

Read the phasor coordinates and metadata back from the OME-TIFF file:

.. GENERATED FROM PYTHON SOURCE LINES 297-306

.. code-block:: Python


    mean_, real_, imag_, attrs = phasor_from_ometiff('phasors.ome.tif')

    numpy.allclose(real_, real)
    assert real_.dtype == numpy.float32
    assert attrs['frequency'] == frequency
    assert attrs['harmonic'] == 1
    assert attrs['description'].startswith('Phasor coordinates of')








.. GENERATED FROM PYTHON SOURCE LINES 307-309

These functions also work transparently with multi-harmonic phasor
coordinates.

.. GENERATED FROM PYTHON SOURCE LINES 311-319

Plot phasor coordinates
-----------------------

The :py:mod:`phasorpy.plot` module provides functions and classes for
plotting phasor and polar coordinates.

Large number of phasor coordinates, such as obtained from imaging,
are commonly visualized as two-dimensional histograms:

.. GENERATED FROM PYTHON SOURCE LINES 319-329

.. code-block:: Python


    from phasorpy.plot import plot_phasor

    plot_phasor(
        real,
        imag,
        frequency=frequency,
        title='Calibrated, filtered phasor coordinates',
    )




.. image-sg:: /tutorials/images/sphx_glr_phasorpy_introduction_006.png
   :alt: Calibrated, filtered phasor coordinates
   :srcset: /tutorials/images/sphx_glr_phasorpy_introduction_006.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 330-335

The calibrated phasor coordinates of all pixels lie inside the universal
semicircle (on which theoretically the phasor coordinates of all single
exponential lifetimes are located).
That means, all pixels contain mixtures of signals from multiple lifetime
components.

.. GENERATED FROM PYTHON SOURCE LINES 337-338

For comparison, the uncalibrated, unfiltered phasor coordinates:

.. GENERATED FROM PYTHON SOURCE LINES 338-346

.. code-block:: Python


    plot_phasor(
        uncalibrated_real,
        uncalibrated_imag,
        allquadrants=True,
        title='Raw phasor coordinates',
    )




.. image-sg:: /tutorials/images/sphx_glr_phasorpy_introduction_007.png
   :alt: Raw phasor coordinates
   :srcset: /tutorials/images/sphx_glr_phasorpy_introduction_007.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 347-354

Select phasor coordinates
-------------------------

The :py:mod:`phasorpy.cursor` module provides functions for selecting phasor
coordinates to define and mask regions of interest within the phasor space.

Mask regions of interest in the phasor space using circular cursors:

.. GENERATED FROM PYTHON SOURCE LINES 354-365

.. code-block:: Python


    from phasorpy.color import CATEGORICAL
    from phasorpy.cursor import mask_from_circular_cursor

    cursor_real = 0.69, 0.59
    cursor_imag = 0.32, 0.33
    radius = 0.05, 0.05
    cursor_masks = mask_from_circular_cursor(
        real, imag, cursor_real, cursor_imag, radius=radius
    )








.. GENERATED FROM PYTHON SOURCE LINES 366-368

Plot the cursors in distinct colors using the higher-level
:py:class:`PhasorPlot` interface:

.. GENERATED FROM PYTHON SOURCE LINES 368-383

.. code-block:: Python


    from phasorpy.plot import PhasorPlot

    phasorplot = PhasorPlot(frequency=frequency, title='Cursors')
    phasorplot.hist2d(real, imag)
    for i in range(len(cursor_real)):
        phasorplot.circle(
            cursor_real[i],
            cursor_imag[i],
            radius=radius[i],
            color=CATEGORICAL[i],
            linestyle='-',
        )
    phasorplot.show()




.. image-sg:: /tutorials/images/sphx_glr_phasorpy_introduction_008.png
   :alt: Cursors
   :srcset: /tutorials/images/sphx_glr_phasorpy_introduction_008.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 384-386

Blend the cursor masks with the mean intensity image to produce a
pseudo-colored image:

.. GENERATED FROM PYTHON SOURCE LINES 386-396

.. code-block:: Python


    from phasorpy.cursor import pseudo_color
    from phasorpy.plot import plot_image

    pseudo_color_image = pseudo_color(*cursor_masks, intensity=mean)

    plot_image(
        pseudo_color_image, title='Pseudo-color image from circular cursors'
    )




.. image-sg:: /tutorials/images/sphx_glr_phasorpy_introduction_009.png
   :alt: Pseudo-color image from circular cursors
   :srcset: /tutorials/images/sphx_glr_phasorpy_introduction_009.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 397-399

Component analysis
------------------

.. GENERATED FROM PYTHON SOURCE LINES 399-402

.. code-block:: Python


    # TODO








.. GENERATED FROM PYTHON SOURCE LINES 403-412

Spectral phasors
----------------

Phasor coordinates can be calculated from hyperspectral images (acquired
at many equidistant emission wavelengths) and processed in much the same
way as time-resolved signals. Calibration is not necessary.

Open a hyperspectral dataset acquired with a laser scanning microscope
at 30 emission wavelengths:

.. GENERATED FROM PYTHON SOURCE LINES 412-424

.. code-block:: Python


    from phasorpy.io import signal_from_lsm

    hyperspectral_signal = signal_from_lsm(fetch('paramecium.lsm'))

    plot_signal_image(
        hyperspectral_signal,
        axis=0,
        title='Hyperspectral image',
        xlabel='wavelength (nm)',
    )




.. image-sg:: /tutorials/images/sphx_glr_phasorpy_introduction_010.png
   :alt: Hyperspectral image, axis=0 'C', mean
   :srcset: /tutorials/images/sphx_glr_phasorpy_introduction_010.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 425-427

Calculate phasor coordinates at the first harmonic and filter out
pixels with low intensities:

.. GENERATED FROM PYTHON SOURCE LINES 427-431

.. code-block:: Python


    mean, real, imag = phasor_from_signal(hyperspectral_signal, axis=0)
    _, real, imag = phasor_threshold(mean, real, imag, mean_min=1)








.. GENERATED FROM PYTHON SOURCE LINES 432-433

Plot the phasor coordinates as a two-dimensional histogram:

.. GENERATED FROM PYTHON SOURCE LINES 433-436

.. code-block:: Python


    plot_phasor(real, imag, allquadrants=True, title='Hyperspectral phasor plot')




.. image-sg:: /tutorials/images/sphx_glr_phasorpy_introduction_011.png
   :alt: Hyperspectral phasor plot
   :srcset: /tutorials/images/sphx_glr_phasorpy_introduction_011.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 437-442

Find clusters
-------------

Automatically find the two elliptical clusters in the phasor space using
a Gaussian mixture model and plot them in distinct colors:

.. GENERATED FROM PYTHON SOURCE LINES 442-463

.. code-block:: Python


    from phasorpy.cluster import phasor_cluster_gmm

    center_real, center_imag, radius, radius_minor, angle = phasor_cluster_gmm(
        real, imag, clusters=2
    )

    phasorplot = PhasorPlot(allquadrants=True, title='Elliptical clusters')
    phasorplot.hist2d(real, imag, cmap='Greys')
    for i in range(len(center_real)):
        phasorplot.cursor(
            center_real[i],
            center_imag[i],
            radius=radius[i],
            radius_minor=radius_minor[i],
            angle=angle[i],
            color=CATEGORICAL[i],
            linestyle='-',
        )
    phasorplot.show()




.. image-sg:: /tutorials/images/sphx_glr_phasorpy_introduction_012.png
   :alt: Elliptical clusters
   :srcset: /tutorials/images/sphx_glr_phasorpy_introduction_012.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 464-465

Use the elliptic clusters to mask regions of interest in the phasor space:

.. GENERATED FROM PYTHON SOURCE LINES 465-478

.. code-block:: Python


    from phasorpy.cursor import mask_from_elliptic_cursor

    elliptic_masks = mask_from_elliptic_cursor(
        real,
        imag,
        center_real,
        center_imag,
        radius=radius,
        radius_minor=radius_minor,
        angle=angle,
    )








.. GENERATED FROM PYTHON SOURCE LINES 479-481

Plot a pseudo-color image, composited from the elliptic cursor masks and
the mean intensity image:

.. GENERATED FROM PYTHON SOURCE LINES 481-488

.. code-block:: Python


    pseudo_color_image = pseudo_color(*elliptic_masks, intensity=mean)

    plot_image(
        pseudo_color_image, title='Pseudo-color image from elliptic cursors'
    )




.. image-sg:: /tutorials/images/sphx_glr_phasorpy_introduction_013.png
   :alt: Pseudo-color image from elliptic cursors
   :srcset: /tutorials/images/sphx_glr_phasorpy_introduction_013.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 489-493

Appendix
--------

Print information about Python interpreter and installed packages:

.. GENERATED FROM PYTHON SOURCE LINES 493-498

.. code-block:: Python


    from phasorpy.utils import versions

    print(versions())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Python-3.12.11
    phasorpy-0.7.dev0
    numpy-2.3.1
    tifffile-2025.6.11
    imagecodecs-n/a
    lfdfiles-2025.5.10
    sdtfile-2025.5.10
    ptufile-2025.5.10
    liffile-2025.5.10
    matplotlib-3.10.3
    scipy-1.16.0
    skimage-n/a
    sklearn-1.7.1
    pandas-2.3.1
    xarray-2025.7.1
    click-8.2.1
    pooch-1.8.2




.. GENERATED FROM PYTHON SOURCE LINES 499-503

sphinx_gallery_thumbnail_number = -8
mypy: allow-untyped-defs, allow-untyped-calls
mypy: disable-error-code="arg-type, assignment"
isort: skip_file


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 11.989 seconds)


.. _sphx_glr_download_tutorials_phasorpy_introduction.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: phasorpy_introduction.ipynb <phasorpy_introduction.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: phasorpy_introduction.py <phasorpy_introduction.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: phasorpy_introduction.zip <phasorpy_introduction.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
