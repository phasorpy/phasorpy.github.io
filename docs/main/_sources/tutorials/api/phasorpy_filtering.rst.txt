
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorials/api/phasorpy_filtering.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: xml

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorials_api_phasorpy_filtering.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorials_api_phasorpy_filtering.py:


Filter phasor coordinates
=========================

Functions for filtering phasor coordinates.

Filtering phasor coordinates improves signal quality by reducing noise while
preserving relevant features. Two of the most common methods for filtering
include the median and wavelet filtering.

.. GENERATED FROM PYTHON SOURCE LINES 14-15

Import required modules and functions:

.. GENERATED FROM PYTHON SOURCE LINES 15-27

.. code-block:: Python


    from phasorpy.datasets import fetch
    from phasorpy.io import signal_from_imspector_tiff
    from phasorpy.phasor import (
        phasor_calibrate,
        phasor_filter_median,
        phasor_filter_pawflim,
        phasor_from_signal,
        phasor_threshold,
    )
    from phasorpy.plot import plot_phasor








.. GENERATED FROM PYTHON SOURCE LINES 28-33

Get calibrated phasor coordinates
---------------------------------

Read a time-correlated single photon counting (TCSPC) histogram from a file.
A homogeneous solution of Fluorescein (4.2 ns) was imaged as a reference:

.. GENERATED FROM PYTHON SOURCE LINES 33-40

.. code-block:: Python


    signal = signal_from_imspector_tiff(fetch('Embryo.tif'))
    frequency = signal.attrs['frequency']

    reference_signal = signal_from_imspector_tiff(fetch('Fluorescein_Embryo.tif'))
    assert reference_signal.attrs['frequency'] == frequency








.. GENERATED FROM PYTHON SOURCE LINES 41-42

Calculate and calibrate phasor coordinates:

.. GENERATED FROM PYTHON SOURCE LINES 42-58

.. code-block:: Python


    mean, real, imag = phasor_from_signal(signal, axis=0)
    reference_mean, reference_real, reference_imag = phasor_from_signal(
        reference_signal, axis=0
    )

    real, imag = phasor_calibrate(
        real,
        imag,
        reference_mean,
        reference_real,
        reference_imag,
        frequency=frequency,
        lifetime=4.2,
    )








.. GENERATED FROM PYTHON SOURCE LINES 59-64

Unfiltered
----------

Plot the unfiltered, calibrated phasor coordinates after applying a
threshold based on the mean intensity to remove background values:

.. GENERATED FROM PYTHON SOURCE LINES 64-71

.. code-block:: Python


    plot_phasor(
        *phasor_threshold(mean, real, imag, mean_min=1)[1:],
        frequency=frequency,
        title='Unfiltered phasor coordinates',
    )




.. image-sg:: /tutorials/api/images/sphx_glr_phasorpy_filtering_001.png
   :alt: Unfiltered phasor coordinates
   :srcset: /tutorials/api/images/sphx_glr_phasorpy_filtering_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 72-81

Median filter
-------------

Median filtering replaces each pixel value with the median of its
neighboring values, reducing noise while preserving edges.
The function :py:func:`phasorpy.phasor.phasor_filter_median` applies a
median filter to phasor coordinates. Typically, applying a 3Ã—3 kernel
one to three times is sufficient to remove noise while maintaining
important features:

.. GENERATED FROM PYTHON SOURCE LINES 81-86

.. code-block:: Python


    mean_filtered, real_filtered, imag_filtered = phasor_filter_median(
        mean, real, imag, repeat=3, size=3
    )








.. GENERATED FROM PYTHON SOURCE LINES 87-88

Thresholds should be applied after filtering:

.. GENERATED FROM PYTHON SOURCE LINES 88-92

.. code-block:: Python

    mean_filtered, real_filtered, imag_filtered = phasor_threshold(
        mean_filtered, real_filtered, imag_filtered, mean_min=1
    )








.. GENERATED FROM PYTHON SOURCE LINES 93-94

Plot the median-filtered and thresholded phasor coordinates:

.. GENERATED FROM PYTHON SOURCE LINES 94-102

.. code-block:: Python


    plot_phasor(
        real_filtered,
        imag_filtered,
        frequency=frequency,
        title='Median-filtered phasor coordinates (3x3 kernel, 3 repetitions)',
    )




.. image-sg:: /tutorials/api/images/sphx_glr_phasorpy_filtering_002.png
   :alt: Median-filtered phasor coordinates (3x3 kernel, 3 repetitions)
   :srcset: /tutorials/api/images/sphx_glr_phasorpy_filtering_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 103-105

Increasing the number of repetitions or the filter kernel size can further
reduce noise, but may also remove relevant features:

.. GENERATED FROM PYTHON SOURCE LINES 105-117

.. code-block:: Python


    mean_filtered, real_filtered, imag_filtered = phasor_threshold(
        *phasor_filter_median(mean, real, imag, repeat=6, size=5), mean_min=1
    )

    plot_phasor(
        real_filtered,
        imag_filtered,
        frequency=frequency,
        title='Median-filtered phasor coordinates (5x5 kernel, 6 repetitions)',
    )




.. image-sg:: /tutorials/api/images/sphx_glr_phasorpy_filtering_003.png
   :alt: Median-filtered phasor coordinates (5x5 kernel, 6 repetitions)
   :srcset: /tutorials/api/images/sphx_glr_phasorpy_filtering_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 118-120

The smoothing effect of median-filtering is demonstrated by plotting the
real components of the filtered and unfiltered phasor coordinates as images:

.. GENERATED FROM PYTHON SOURCE LINES 120-139

.. code-block:: Python



    def plot_images(im0, im1):
        # TODO: replace with future phasorpy.plot.plot_images
        from matplotlib import pyplot

        fig, (ax0, ax1) = pyplot.subplots(
            1, 2, figsize=(6.4, 3.4), subplot_kw={'xticks': [], 'yticks': []}
        )
        fig.suptitle('Real component of phasor coordinates')
        ax0.imshow(im0, vmin=0.4, vmax=0.9)
        ax0.set_title('Unfiltered')
        ax1.imshow(im1, vmin=0.4, vmax=0.9)
        ax1.set_title('Median-filtered')
        pyplot.tight_layout()


    plot_images(phasor_threshold(mean, real, imag, mean_min=1)[1], real_filtered)




.. image-sg:: /tutorials/api/images/sphx_glr_phasorpy_filtering_004.png
   :alt: Real component of phasor coordinates, Unfiltered, Median-filtered
   :srcset: /tutorials/api/images/sphx_glr_phasorpy_filtering_004.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 140-149

pawFLIM wavelet filter
----------------------

Filtering based on wavelet decomposition is another method to reduce noise.
The function :py:func:`phasorpy.phasor.phasor_filter_pawflim` is based
on the `pawFLIM <https://github.com/maurosilber/pawflim>`_ library.
While the median filter is applicable to any type of phasor coordinates,
the pawFLIM filter requires calibrated phasor coordinates from FLIM
measurements and at least one harmonic and its corresponding double:

.. GENERATED FROM PYTHON SOURCE LINES 149-168

.. code-block:: Python


    harmonic = [1, 2]

    mean, real, imag = phasor_from_signal(signal, axis=0, harmonic=harmonic)
    reference_mean, reference_real, reference_imag = phasor_from_signal(
        reference_signal, axis=0, harmonic=harmonic
    )

    real, imag = phasor_calibrate(
        real,
        imag,
        reference_mean,
        reference_real,
        reference_imag,
        frequency=frequency,
        lifetime=4.2,
        harmonic=harmonic,
    )








.. GENERATED FROM PYTHON SOURCE LINES 169-170

Apply the pawFLIM wavelet filter to the calibrated phasor coordinates:

.. GENERATED FROM PYTHON SOURCE LINES 170-175

.. code-block:: Python


    mean_filtered, real_filtered, imag_filtered = phasor_threshold(
        *phasor_filter_pawflim(mean, real, imag, harmonic=harmonic), mean_min=1
    )








.. GENERATED FROM PYTHON SOURCE LINES 176-177

Plot the pawFLIM-filtered and thresholded phasor coordinates:

.. GENERATED FROM PYTHON SOURCE LINES 177-185

.. code-block:: Python


    plot_phasor(
        real_filtered[0],
        imag_filtered[0],
        frequency=frequency,
        title='pawFLIM-filtered phasor coordinates (sigma=2, levels=1)',
    )




.. image-sg:: /tutorials/api/images/sphx_glr_phasorpy_filtering_005.png
   :alt: pawFLIM-filtered phasor coordinates (sigma=2, levels=1)
   :srcset: /tutorials/api/images/sphx_glr_phasorpy_filtering_005.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 186-188

Increasing the significance level of the comparison between phasor
coordinates and/or the maximum averaging area can further reduce noise:

.. GENERATED FROM PYTHON SOURCE LINES 188-203

.. code-block:: Python


    mean_filtered, real_filtered, imag_filtered = phasor_filter_pawflim(
        mean, real, imag, harmonic=harmonic, sigma=5, levels=3
    )
    mean_filtered, real_filtered, imag_filtered = phasor_threshold(
        mean_filtered, real_filtered, imag_filtered, 1
    )

    plot_phasor(
        real_filtered[0],
        imag_filtered[0],
        frequency=frequency,
        title='pawFLIM-filtered phasor coordinates (sigma=5, levels=3)',
    )




.. image-sg:: /tutorials/api/images/sphx_glr_phasorpy_filtering_006.png
   :alt: pawFLIM-filtered phasor coordinates (sigma=5, levels=3)
   :srcset: /tutorials/api/images/sphx_glr_phasorpy_filtering_006.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 204-207

sphinx_gallery_thumbnail_number = -1
mypy: allow-untyped-defs, allow-untyped-calls
mypy: disable-error-code="arg-type"


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 3.202 seconds)


.. _sphx_glr_download_tutorials_api_phasorpy_filtering.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: phasorpy_filtering.ipynb <phasorpy_filtering.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: phasorpy_filtering.py <phasorpy_filtering.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: phasorpy_filtering.zip <phasorpy_filtering.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
