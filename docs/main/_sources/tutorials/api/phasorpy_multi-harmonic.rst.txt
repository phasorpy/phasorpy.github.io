
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorials/api/phasorpy_multi-harmonic.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: xml

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorials_api_phasorpy_multi-harmonic.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorials_api_phasorpy_multi-harmonic.py:


Multi-harmonic phasor coordinates
=================================

An introduction to handling multi-harmonic phasor coordinates.

This tutorial is an adaptation of
:ref:`sphx_glr_tutorials_phasorpy_introduction.py`, focusing on the
calculation, calibration, filtering, thresholding, storage, and visualization
of multi-harmonic phasor coordinates.

.. GENERATED FROM PYTHON SOURCE LINES 15-16

Import required modules and functions:

.. GENERATED FROM PYTHON SOURCE LINES 16-30

.. code-block:: Python


    import numpy
    import tifffile  # TODO: from phasorpy.io import read_ometiff

    from phasorpy.datasets import fetch
    from phasorpy.io import phasor_from_ometiff, phasor_to_ometiff
    from phasorpy.phasor import (
        phasor_calibrate,
        phasor_filter,
        phasor_from_signal,
        phasor_threshold,
    )
    from phasorpy.plot import PhasorPlot








.. GENERATED FROM PYTHON SOURCE LINES 31-36

Read signal from file
---------------------

Read a time-correlated single photon counting (TCSPC) histogram,
acquired at 80.11 MHz, from a file:

.. GENERATED FROM PYTHON SOURCE LINES 36-41

.. code-block:: Python



    signal = tifffile.imread(fetch('Embryo.tif'))
    frequency = 80.11  # MHz; from the XML metadata in the file








.. GENERATED FROM PYTHON SOURCE LINES 42-49

Calculate phasor coordinates
----------------------------

Phasor coordinates at multiple harmonics can be calculated at once
from the signal. The histogram samples are in the first dimension of the
signal (`axis=0`).
The first and second harmonics are calculated in this example:

.. GENERATED FROM PYTHON SOURCE LINES 49-52

.. code-block:: Python


    mean, real, imag = phasor_from_signal(signal, harmonic=[1, 2], axis=0)








.. GENERATED FROM PYTHON SOURCE LINES 53-55

The two harmonics are in the first dimension of the phasor coordinates,
`real` and `imag`:

.. GENERATED FROM PYTHON SOURCE LINES 55-58

.. code-block:: Python


    print(mean.shape, real.shape, imag.shape)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    (512, 512) (2, 512, 512) (2, 512, 512)




.. GENERATED FROM PYTHON SOURCE LINES 59-60

To calculate all harmonics, use ``harmonic='all'``:

.. GENERATED FROM PYTHON SOURCE LINES 60-63

.. code-block:: Python


    _ = phasor_from_signal(signal, harmonic='all', axis=0)








.. GENERATED FROM PYTHON SOURCE LINES 64-69

Calibrate phasor coordinates
----------------------------

A homogeneous solution of Fluorescein with a fluorescence lifetime of 4.2 ns
was imaged as a reference for calibration:

.. GENERATED FROM PYTHON SOURCE LINES 69-72

.. code-block:: Python


    reference_signal = tifffile.imread(fetch('Fluorescein_Embryo.tif'))








.. GENERATED FROM PYTHON SOURCE LINES 73-75

Calculate phasor coordinates from the measured reference signal at
the first and second harmonics:

.. GENERATED FROM PYTHON SOURCE LINES 75-80

.. code-block:: Python


    reference_mean, reference_real, reference_imag = phasor_from_signal(
        reference_signal, harmonic=[1, 2], axis=0
    )








.. GENERATED FROM PYTHON SOURCE LINES 81-84

Calibration can be performed at all harmonics simultaneously. Calibrate the
raw phasor coordinates with the reference coordinates of known lifetime
(4.2 ns), at the first and second harmonics:

.. GENERATED FROM PYTHON SOURCE LINES 84-96

.. code-block:: Python


    real, imag = phasor_calibrate(
        real,
        imag,
        reference_real,
        reference_imag,
        frequency=frequency,
        harmonic=[1, 2],
        lifetime=4.2,
        skip_axis=0,
    )








.. GENERATED FROM PYTHON SOURCE LINES 97-99

If necessary, the calibration can be undone/reversed using the
same reference:

.. GENERATED FROM PYTHON SOURCE LINES 99-118

.. code-block:: Python


    uncalibrated_real, uncalibrated_imag = phasor_calibrate(
        real,
        imag,
        reference_real,
        reference_imag,
        frequency=frequency,
        harmonic=[1, 2],
        lifetime=4.2,
        reverse=True,
        skip_axis=0,
    )

    numpy.testing.assert_allclose(
        (uncalibrated_real, uncalibrated_imag),
        phasor_from_signal(signal, harmonic=[1, 2], axis=0)[1:],
        atol=1e-3,
    )








.. GENERATED FROM PYTHON SOURCE LINES 119-126

Filter phasor coordinates
-------------------------

Applying median filter to the calibrated phasor coordinates,
often multiple times, improves contrast and reduces noise.
This is done at multiple harmonics simultaneously by excluding the
harmonic axis from the filter:

.. GENERATED FROM PYTHON SOURCE LINES 126-131

.. code-block:: Python


    real, imag = phasor_filter(
        real, imag, method='median', size=3, repeat=2, skip_axis=0
    )








.. GENERATED FROM PYTHON SOURCE LINES 132-135

Pixels with low intensities are commonly excluded from analysis and
visualization of phasor coordinates. For now, harmonics must be treated
separately when thresholding:

.. GENERATED FROM PYTHON SOURCE LINES 135-141

.. code-block:: Python


    real1, real2 = real
    imag1, imag2 = imag
    mean, real1, imag1 = phasor_threshold(mean, real1, imag1, mean_min=1)
    mean, real2, imag2 = phasor_threshold(mean, real2, imag2, mean_min=1)








.. GENERATED FROM PYTHON SOURCE LINES 142-147

Store phasor coordinates
------------------------

Write the calibrated and filtered phasor coordinates at multiple harmonics,
and the fundamental frequency to an OME-TIFF file:

.. GENERATED FROM PYTHON SOURCE LINES 147-161

.. code-block:: Python


    phasor_to_ometiff(
        'phasors.ome.tif',
        mean,
        real,
        imag,
        frequency=frequency,
        harmonic=[1, 2],
        description=(
            'Phasor coordinates at first and second harmonics of a zebrafish '
            'embryo at day 3, calibrated, median-filtered, and thresholded.'
        ),
    )








.. GENERATED FROM PYTHON SOURCE LINES 162-163

Read the phasor coordinates and metadata back from the OME-TIFF file:

.. GENERATED FROM PYTHON SOURCE LINES 163-176

.. code-block:: Python


    mean_, real_, imag_, attrs = phasor_from_ometiff(
        'phasors.ome.tif', harmonic='all'
    )

    numpy.allclose(real_, real)
    assert real_.dtype == numpy.float32
    assert attrs['frequency'] == frequency
    assert attrs['harmonic'] == [1, 2]
    assert attrs['description'].startswith(
        'Phasor coordinates at first and second'
    )








.. GENERATED FROM PYTHON SOURCE LINES 177-182

Plot phasor coordinates
-----------------------

Visualize the 2D histogram of the calibrated and filtered phasor coordinates
at the second harmonic:

.. GENERATED FROM PYTHON SOURCE LINES 182-190

.. code-block:: Python


    phasorplot = PhasorPlot(
        frequency=frequency,
        title='Calibrated, filtered phasor coordinates at second harmonic',
    )
    phasorplot.hist2d(real2, imag2)
    phasorplot.show()




.. image-sg:: /tutorials/api/images/sphx_glr_phasorpy_multi-harmonic_001.png
   :alt: Calibrated, filtered phasor coordinates at second harmonic
   :srcset: /tutorials/api/images/sphx_glr_phasorpy_multi-harmonic_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 191-193

For comparison, the uncalibrated, unfiltered phasor coordinates at the
second harmonic:

.. GENERATED FROM PYTHON SOURCE LINES 193-200

.. code-block:: Python


    phasorplot = PhasorPlot(
        allquadrants=True, title='Raw phasor coordinates at second harmonic'
    )
    phasorplot.hist2d(uncalibrated_real[1], uncalibrated_imag[1])
    phasorplot.show()




.. image-sg:: /tutorials/api/images/sphx_glr_phasorpy_multi-harmonic_002.png
   :alt: Raw phasor coordinates at second harmonic
   :srcset: /tutorials/api/images/sphx_glr_phasorpy_multi-harmonic_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 201-203

Component analysis
------------------

.. GENERATED FROM PYTHON SOURCE LINES 203-206

.. code-block:: Python


    # TODO








.. GENERATED FROM PYTHON SOURCE LINES 207-210

sphinx_gallery_thumbnail_number = -1
mypy: allow-untyped-defs, allow-untyped-calls
mypy: disable-error-code="arg-type"


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 1.018 seconds)


.. _sphx_glr_download_tutorials_api_phasorpy_multi-harmonic.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: phasorpy_multi-harmonic.ipynb <phasorpy_multi-harmonic.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: phasorpy_multi-harmonic.py <phasorpy_multi-harmonic.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: phasorpy_multi-harmonic.zip <phasorpy_multi-harmonic.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
