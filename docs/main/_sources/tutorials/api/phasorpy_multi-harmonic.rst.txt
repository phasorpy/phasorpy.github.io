
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorials/api/phasorpy_multi-harmonic.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: xml

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorials_api_phasorpy_multi-harmonic.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorials_api_phasorpy_multi-harmonic.py:


Multi-harmonic phasor coordinates
=================================

An introduction to handling multi-harmonic phasor coordinates.

This tutorial is an adaptation of
:ref:`sphx_glr_tutorials_phasorpy_introduction.py`, focusing on the
calculation, calibration, filtering, thresholding, storage, and visualization
of multi-harmonic phasor coordinates.

.. GENERATED FROM PYTHON SOURCE LINES 15-16

Import required modules and functions:

.. GENERATED FROM PYTHON SOURCE LINES 16-33

.. code-block:: Python


    import numpy

    from phasorpy.datasets import fetch
    from phasorpy.io import (
        phasor_from_ometiff,
        phasor_to_ometiff,
        signal_from_imspector_tiff,
    )
    from phasorpy.phasor import (
        phasor_calibrate,
        phasor_filter_median,
        phasor_from_signal,
        phasor_threshold,
    )
    from phasorpy.plot import plot_phasor








.. GENERATED FROM PYTHON SOURCE LINES 34-39

Read signal from file
---------------------

Read a time-correlated single photon counting (TCSPC) histogram,
acquired at 80.11 MHz, from a file:

.. GENERATED FROM PYTHON SOURCE LINES 39-43

.. code-block:: Python


    signal = signal_from_imspector_tiff(fetch('Embryo.tif'))
    frequency = signal.attrs['frequency']








.. GENERATED FROM PYTHON SOURCE LINES 44-51

Calculate phasor coordinates
----------------------------

Phasor coordinates at multiple harmonics can be calculated at once
from the signal. The histogram samples are in the first dimension of the
signal (`axis=0`).
The first and second harmonics are calculated in this example:

.. GENERATED FROM PYTHON SOURCE LINES 51-54

.. code-block:: Python


    mean, real, imag = phasor_from_signal(signal, harmonic=[1, 2], axis=0)








.. GENERATED FROM PYTHON SOURCE LINES 55-57

The two harmonics are in the first dimension of the phasor coordinates,
`real` and `imag`:

.. GENERATED FROM PYTHON SOURCE LINES 57-60

.. code-block:: Python


    print(mean.shape, real.shape, imag.shape)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    (512, 512) (2, 512, 512) (2, 512, 512)




.. GENERATED FROM PYTHON SOURCE LINES 61-62

Plot the calculated phasor coordinates:

.. GENERATED FROM PYTHON SOURCE LINES 62-67

.. code-block:: Python


    from phasorpy.plot import plot_phasor_image

    plot_phasor_image(mean, real, imag, title='Sample')




.. image-sg:: /tutorials/api/images/sphx_glr_phasorpy_multi-harmonic_001.png
   :alt: Sample, mean, G, real, S, imag
   :srcset: /tutorials/api/images/sphx_glr_phasorpy_multi-harmonic_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 68-69

To calculate all harmonics, use ``harmonic='all'``:

.. GENERATED FROM PYTHON SOURCE LINES 69-72

.. code-block:: Python


    _ = phasor_from_signal(signal, harmonic='all', axis=0)








.. GENERATED FROM PYTHON SOURCE LINES 73-78

Calibrate phasor coordinates
----------------------------

A homogeneous solution of Fluorescein with a fluorescence lifetime of 4.2 ns
was imaged as a reference for calibration:

.. GENERATED FROM PYTHON SOURCE LINES 78-82

.. code-block:: Python


    reference_signal = signal_from_imspector_tiff(fetch('Fluorescein_Embryo.tif'))
    assert reference_signal.attrs['frequency'] == frequency








.. GENERATED FROM PYTHON SOURCE LINES 83-85

Calculate phasor coordinates from the measured reference signal at
the first and second harmonics:

.. GENERATED FROM PYTHON SOURCE LINES 85-90

.. code-block:: Python


    reference_mean, reference_real, reference_imag = phasor_from_signal(
        reference_signal, harmonic=[1, 2], axis=0
    )








.. GENERATED FROM PYTHON SOURCE LINES 91-94

Calibration can be performed at all harmonics simultaneously. Calibrate the
raw phasor coordinates with the reference coordinates of known lifetime
(4.2 ns), at the first and second harmonics:

.. GENERATED FROM PYTHON SOURCE LINES 94-106

.. code-block:: Python


    real, imag = phasor_calibrate(
        real,
        imag,
        reference_mean,
        reference_real,
        reference_imag,
        frequency=frequency,
        harmonic=[1, 2],
        lifetime=4.2,
    )








.. GENERATED FROM PYTHON SOURCE LINES 107-109

If necessary, the calibration can be undone/reversed using the
same reference:

.. GENERATED FROM PYTHON SOURCE LINES 109-128

.. code-block:: Python


    uncalibrated_real, uncalibrated_imag = phasor_calibrate(
        real,
        imag,
        reference_mean,
        reference_real,
        reference_imag,
        frequency=frequency,
        harmonic=[1, 2],
        lifetime=4.2,
        reverse=True,
    )

    numpy.testing.assert_allclose(
        (uncalibrated_real, uncalibrated_imag),
        phasor_from_signal(signal, harmonic=[1, 2], axis=0)[1:],
        atol=1e-3,
    )








.. GENERATED FROM PYTHON SOURCE LINES 129-136

Filter phasor coordinates
-------------------------

Applying median filter to the calibrated phasor coordinates,
often multiple times, improves contrast and reduces noise.
The filter is applied independently to the real and imaginary components
of the harmonics, but not to the average signal:

.. GENERATED FROM PYTHON SOURCE LINES 136-139

.. code-block:: Python


    mean, real, imag = phasor_filter_median(mean, real, imag, size=3, repeat=2)








.. GENERATED FROM PYTHON SOURCE LINES 140-142

Pixels with low intensities are commonly excluded from analysis and
visualization of phasor coordinates:

.. GENERATED FROM PYTHON SOURCE LINES 142-145

.. code-block:: Python


    mean, real, imag = phasor_threshold(mean, real, imag, mean_min=1)








.. GENERATED FROM PYTHON SOURCE LINES 146-147

Show the calibrated, filtered phasor coordinates:

.. GENERATED FROM PYTHON SOURCE LINES 147-152

.. code-block:: Python


    plot_phasor_image(
        mean, real, imag, title='Calibrated, filtered phasor coordinates'
    )




.. image-sg:: /tutorials/api/images/sphx_glr_phasorpy_multi-harmonic_002.png
   :alt: Calibrated, filtered phasor coordinates, mean, G, real, S, imag
   :srcset: /tutorials/api/images/sphx_glr_phasorpy_multi-harmonic_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 153-158

Store phasor coordinates
------------------------

Write the calibrated and filtered phasor coordinates at multiple harmonics,
and the fundamental frequency to an OME-TIFF file:

.. GENERATED FROM PYTHON SOURCE LINES 158-172

.. code-block:: Python


    phasor_to_ometiff(
        'phasors.ome.tif',
        mean,
        real,
        imag,
        frequency=frequency,
        harmonic=[1, 2],
        description=(
            'Phasor coordinates at first and second harmonics of a zebrafish '
            'embryo at day 3, calibrated, median-filtered, and thresholded.'
        ),
    )








.. GENERATED FROM PYTHON SOURCE LINES 173-174

Read the phasor coordinates and metadata back from the OME-TIFF file:

.. GENERATED FROM PYTHON SOURCE LINES 174-187

.. code-block:: Python


    mean_, real_, imag_, attrs = phasor_from_ometiff(
        'phasors.ome.tif', harmonic='all'
    )

    numpy.allclose(real_, real)
    assert real_.dtype == numpy.float32
    assert attrs['frequency'] == frequency
    assert attrs['harmonic'] == [1, 2]
    assert attrs['description'].startswith(
        'Phasor coordinates at first and second harmonics'
    )








.. GENERATED FROM PYTHON SOURCE LINES 188-193

Plot phasor coordinates
-----------------------

Visualize the 2D histogram of the calibrated and filtered phasor coordinates
at the second harmonic:

.. GENERATED FROM PYTHON SOURCE LINES 193-201

.. code-block:: Python


    plot_phasor(
        real[1],
        imag[1],
        frequency=frequency,
        title='Calibrated, filtered phasor coordinates at second harmonic',
    )




.. image-sg:: /tutorials/api/images/sphx_glr_phasorpy_multi-harmonic_003.png
   :alt: Calibrated, filtered phasor coordinates at second harmonic
   :srcset: /tutorials/api/images/sphx_glr_phasorpy_multi-harmonic_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 202-204

For comparison, the uncalibrated, unfiltered phasor coordinates at the
second harmonic:

.. GENERATED FROM PYTHON SOURCE LINES 204-213

.. code-block:: Python


    plot_phasor(
        uncalibrated_real[1],
        uncalibrated_imag[1],
        frequency=frequency,
        allquadrants=True,
        title='Raw phasor coordinates at second harmonic',
    )




.. image-sg:: /tutorials/api/images/sphx_glr_phasorpy_multi-harmonic_004.png
   :alt: Raw phasor coordinates at second harmonic
   :srcset: /tutorials/api/images/sphx_glr_phasorpy_multi-harmonic_004.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 214-216

Component analysis
------------------

.. GENERATED FROM PYTHON SOURCE LINES 216-219

.. code-block:: Python


    # TODO








.. GENERATED FROM PYTHON SOURCE LINES 220-223

sphinx_gallery_thumbnail_number = -1
mypy: allow-untyped-defs, allow-untyped-calls
mypy: disable-error-code="arg-type"


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 1.726 seconds)


.. _sphx_glr_download_tutorials_api_phasorpy_multi-harmonic.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: phasorpy_multi-harmonic.ipynb <phasorpy_multi-harmonic.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: phasorpy_multi-harmonic.py <phasorpy_multi-harmonic.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: phasorpy_multi-harmonic.zip <phasorpy_multi-harmonic.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
