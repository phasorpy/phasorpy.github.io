
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorials/api/phasorpy_io.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: xml

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorials_api_phasorpy_io.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorials_api_phasorpy_io.py:


File input/output
=================

Read and write phasor related data from and to various file formats.

The :py:mod:`phasorpy.io` module provides functions to read phasor
coordinates, FLIM/TCSPC histograms, hyperspectral image stacks, lifetime
images, and relevant metadata from various file formats used in bio-imaging.
The module also includes functions to write phasor coordinates to OME-TIFF
and SimFCS referenced files.

.. GENERATED FROM PYTHON SOURCE LINES 16-19

.. note::
  This tutorial is work in progress.
  Not all supported file formats are included yet.

.. GENERATED FROM PYTHON SOURCE LINES 21-23

Import required modules and functions.
Define a helper function to compare image histograms:

.. GENERATED FROM PYTHON SOURCE LINES 23-55

.. code-block:: Python


    import math

    import numpy
    from matplotlib import pyplot

    from phasorpy.phasor import (
        phasor_from_signal,
        phasor_threshold,
        phasor_to_apparent_lifetime,
        phasor_transform,
    )
    from phasorpy.plot import plot_phasor, plot_phasor_image, plot_signal_image


    def plot_histograms(
        *images, title=None, xlabel=None, ylabel=None, labels=None, **kwargs
    ):
        # TODO: replace by future phasorpy.plot.plot_histograms
        if labels is None:
            labels = [None] * len(images)
        fig, ax = pyplot.subplots()
        for image, label in zip(images, labels):
            ax.hist(image.flatten(), label=label, **kwargs)
        ax.set_title(title)
        ax.set_xlabel(xlabel)
        ax.set_ylabel(ylabel)
        ax.legend()
        pyplot.tight_layout()
        pyplot.show()









.. GENERATED FROM PYTHON SOURCE LINES 56-65

Sample files
------------

PhasorPy provides access to sample files in various formats shared publicly
on Zenodo, Figshare, or GitHub.
The files in these repositories are accessed using the
:py:func:`phasorpy.datasets.fetch` function, which transparently downloads
files if they were not already downloaded before. The function returns
the path to the downloaded file:

.. GENERATED FROM PYTHON SOURCE LINES 65-71

.. code-block:: Python


    from phasorpy.datasets import fetch

    filename = fetch('FLIM_testdata.lif')
    print(filename)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /home/runner/.cache/phasorpy/FLIM_testdata.lif




.. GENERATED FROM PYTHON SOURCE LINES 72-74

Consider sharing datasets with the `PhasorPy community on Zenodo
<https://zenodo.org/communities/phasorpy/>`_.

.. GENERATED FROM PYTHON SOURCE LINES 76-93

Leica LIF and XLEF
------------------

Leica image files (LIF and XLEF) are written by Leica LAS X software.
They contain collections of multi-dimensional images and metadata from
a variety of microscopy acquisition and analysis modes.
The PhasorPy library currently supports reading hyperspectral images,
phasor coordinates, and lifetime images from Leica image files.
The implementation is based on the
`liffile <https://github.com/cgohlke/liffile/>`_ library.

LIF-FLIM files that were analyzed with the LAS X software contain
calculated phasor coordinates, lifetime images, and relevant metadata.
The :py:func:`phasorpy.io.phasor_from_lif` and
:py:func:`phasorpy.io.lifetime_from_lif` functions are used to read those
data from the `FLIM_testdata
<https://dx.doi.org/10.6084/m9.figshare.22336594.v1>`_ dataset:

.. GENERATED FROM PYTHON SOURCE LINES 93-101

.. code-block:: Python


    from phasorpy.io import lifetime_from_lif, phasor_from_lif

    filename = 'FLIM_testdata.lif'
    mean, real, imag, attrs = phasor_from_lif(fetch(filename))

    plot_phasor_image(mean, real, imag, title=filename)




.. image-sg:: /tutorials/api/images/sphx_glr_phasorpy_io_001.png
   :alt: FLIM_testdata.lif, mean, G, real, S, imag
   :srcset: /tutorials/api/images/sphx_glr_phasorpy_io_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 102-106

The returned mean intensity and uncalibrated phasor coordinates are
numpy arrays. ``attrs`` is a dictionary containing metadata, including the
auto-reference phase (in degrees) and modulation for all image channels,
as well as the fundamental laser frequency (in MHz):

.. GENERATED FROM PYTHON SOURCE LINES 106-113

.. code-block:: Python


    frequency = attrs['frequency']
    channel_0 = attrs['flim_phasor_channels'][0]
    reference_phase = channel_0['AutomaticReferencePhase']
    reference_modulation = channel_0['AutomaticReferenceAmplitude']
    intensity_min = channel_0['IntensityThreshold'] / attrs['samples']








.. GENERATED FROM PYTHON SOURCE LINES 114-115

These metadata are used to calibrate and threshold the phasor coordinates:

.. GENERATED FROM PYTHON SOURCE LINES 115-130

.. code-block:: Python


    real, imag = phasor_transform(
        real, imag, -math.radians(reference_phase), 1 / reference_modulation
    )

    mean, real, imag = phasor_threshold(mean, real, imag, mean_min=intensity_min)

    plot_phasor(
        real,
        imag,
        frequency=frequency,
        title=f'{filename} ({frequency} MHz)',
        cmin=10,
    )




.. image-sg:: /tutorials/api/images/sphx_glr_phasorpy_io_002.png
   :alt: FLIM_testdata.lif (19.505 MHz)
   :srcset: /tutorials/api/images/sphx_glr_phasorpy_io_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 131-133

Apparent single lifetimes are calculated from the calibrated phasor
coordinates and compared to the lifetimes calculated by LAS X software:

.. GENERATED FROM PYTHON SOURCE LINES 133-158

.. code-block:: Python


    phase_lifetime, modulation_lifetime = phasor_to_apparent_lifetime(
        real, imag, frequency
    )

    fitted_lifetime = lifetime_from_lif(fetch(filename))[0]
    fitted_lifetime[numpy.isnan(mean)] = numpy.nan

    plot_histograms(
        phase_lifetime,
        modulation_lifetime,
        fitted_lifetime,
        range=(0, 10),
        bins=100,
        alpha=0.66,
        title='Lifetime histograms',
        xlabel='Lifetime (ns)',
        ylabel='Counts',
        labels=[
            'Phase lifetime',
            'Modulation lifetime',
            'Fitted lifetimes from LIF',
        ],
    )




.. image-sg:: /tutorials/api/images/sphx_glr_phasorpy_io_003.png
   :alt: Lifetime histograms
   :srcset: /tutorials/api/images/sphx_glr_phasorpy_io_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 159-163

The apparent single lifetimes from phase and modulation do not exactly match.
Most likely there is more than one lifetime component in the sample.
This could also explain the difference from the lifetimes fitted by the
LAS X software.

.. GENERATED FROM PYTHON SOURCE LINES 165-170

.. note::
  FLIM/TCSPC histograms cannot currently be read directly from
  LIF-FLIM files since the storage scheme for those data is undocumented
  or patent-pending. However, TTTR records can be exported from LIF-FLIM
  files to PicoQuant PTU format by the LAS X software.

.. GENERATED FROM PYTHON SOURCE LINES 172-175

.. todo::
  No public, hyperspectral dataset in LIF format is currently available
  for demonstrating the :py:func:`phasorpy.io.signal_from_lif` function.

.. GENERATED FROM PYTHON SOURCE LINES 177-192

PicoQuant PTU
-------------

PicoQuant PTU files are written by PicoQuant SymPhoTime, Leica LAS X, and
other software. The files contain time-correlated single-photon
counting (TCSPC) measurement data and instrumentation parameters.
The PhasorPy library supports reading TCSPC histograms from PicoQuant PTU
files acquired in T3 imaging mode. The implementation is based on the
`ptufile <https://github.com/cgohlke/ptufile/>`_ library.

The :py:func:`phasorpy.io.signal_from_ptu` function is used to read
the TCSPC histogram from a PTU file exported from the `FLIM_testdata
<https://dx.doi.org/10.6084/m9.figshare.22336594.v1>`_ dataset.
The function by default returns a 5-dimensional image with dimension order
TYXCH. Channel and frames are specified to reduce the dimensionality:

.. GENERATED FROM PYTHON SOURCE LINES 192-200

.. code-block:: Python


    from phasorpy.io import signal_from_ptu

    filename = 'FLIM_testdata.lif.ptu'
    signal = signal_from_ptu(fetch(filename), channel=0, frame=0, keepdims=False)

    plot_signal_image(signal, title=filename)




.. image-sg:: /tutorials/api/images/sphx_glr_phasorpy_io_004.png
   :alt: FLIM_testdata.lif.ptu, axis=2 'H', mean
   :srcset: /tutorials/api/images/sphx_glr_phasorpy_io_004.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 201-214

The TCSPC histogram contains more photons than the phasor intensity image
stored in the LIF-FLIM file. The LAS X software likely applies a filter to
the TCSPC histogram before phasor analysis.

The returned ``signal`` is an `xarray.DataArray
<https://docs.xarray.dev/en/stable/generated/xarray.DataArray.html>`_
containing the TCSPC histogram as a numpy array, and metadata as a
dictionary in the ``attrs`` property.
The metadata includes all PTU tags and the fundamental laser frequency,
which is needed to interpret the phasor coordinates.
The reference phase and modulation previously loaded from the LIF-FLIM file
is again used to calibrate the phasor coordinates. The same intensity
threshold is applied:

.. GENERATED FROM PYTHON SOURCE LINES 214-234

.. code-block:: Python


    frequency = signal.attrs['frequency']
    assert frequency == attrs['frequency']  # frequency matches LIF metadata

    mean, real, imag = phasor_from_signal(signal)

    real, imag = phasor_transform(
        real, imag, -math.radians(reference_phase), 1 / reference_modulation
    )

    mean, real, imag = phasor_threshold(mean, real, imag, mean_min=intensity_min)

    plot_phasor(
        real,
        imag,
        frequency=frequency,
        title=f'{filename} ({frequency} MHz)',
        cmin=10,
    )




.. image-sg:: /tutorials/api/images/sphx_glr_phasorpy_io_005.png
   :alt: FLIM_testdata.lif.ptu (19.505 MHz)
   :srcset: /tutorials/api/images/sphx_glr_phasorpy_io_005.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 235-237

Compare the apparent single lifetimes calculated from the PTU with the
lifetimes previously read from the LIF-FLIM file:

.. GENERATED FROM PYTHON SOURCE LINES 237-250

.. code-block:: Python


    plot_histograms(
        phasor_to_apparent_lifetime(real, imag, frequency)[0],
        phase_lifetime,
        range=(0, 10),
        bins=100,
        alpha=0.66,
        title='Lifetime histograms',
        xlabel='Lifetime (ns)',
        ylabel='Counts',
        labels=['Phase lifetime from PTU', 'Phase lifetime from LIF'],
    )




.. image-sg:: /tutorials/api/images/sphx_glr_phasorpy_io_006.png
   :alt: Lifetime histograms
   :srcset: /tutorials/api/images/sphx_glr_phasorpy_io_006.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 251-261

Zeiss CZI
---------

Carl Zeiss image files (CZI) are written by Zeiss ZEN software.
They contain images and metadata from a variety of microscopy acquisition
and analysis modes, including hyperspectral imaging.
PhasorPy does not currently support reading CZI files.
However, hyperspectral images can be read from CZI files using, for example,
the `pylibCZIrw  <https://github.com/ZEISS/pylibczirw/>`_ or
`BioIO <https://github.com/bioio-devs/bioio>`_ libraries.

.. GENERATED FROM PYTHON SOURCE LINES 263-268

Zeiss LSM
---------

.. todo::
  Read hyperspectral image stack from Zeiss LSM file.

.. GENERATED FROM PYTHON SOURCE LINES 270-275

Becker & Hickl SDT
------------------

.. todo::
  Read TCSPC histogram from Becker & Hickl SDT file.

.. GENERATED FROM PYTHON SOURCE LINES 277-282

FLIMbox FBD
-----------

.. todo::
  Read TCSPC histogram from FLIMbox FBD file.

.. GENERATED FROM PYTHON SOURCE LINES 284-289

FLIM LABS JSON
--------------

.. todo::
  Read TCSPC histogram from FLIM LABS JSON file.

.. GENERATED FROM PYTHON SOURCE LINES 291-296

ISS VistaVision IFLI
--------------------

.. todo::
  Read phasor coordinates from ISS VistaVision IFLI file.

.. GENERATED FROM PYTHON SOURCE LINES 298-303

SimFCS REF and R64
------------------

.. todo::
  Read and write phasor coordinates from and to SimFCS referenced files.

.. GENERATED FROM PYTHON SOURCE LINES 305-310

PhasorPy OME-TIFF
-----------------

.. todo::
 Read and write phasor coordinates from and to PhasorPy OME-TIFF files.

.. GENERATED FROM PYTHON SOURCE LINES 312-315

sphinx_gallery_thumbnail_number = 3
mypy: allow-untyped-defs, allow-untyped-calls
mypy: disable-error-code="arg-type"


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 6.117 seconds)


.. _sphx_glr_download_tutorials_api_phasorpy_io.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: phasorpy_io.ipynb <phasorpy_io.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: phasorpy_io.py <phasorpy_io.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: phasorpy_io.zip <phasorpy_io.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
