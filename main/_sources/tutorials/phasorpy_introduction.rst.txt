
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorials/phasorpy_introduction.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: xml

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorials_phasorpy_introduction.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorials_phasorpy_introduction.py:


Introduction to PhasorPy
========================

An introduction to using the PhasorPy library.

PhasorPy is an open-source Python library for the analysis of fluorescence
lifetime and hyperspectral images using the :doc:`/phasor_approach`.

.. GENERATED FROM PYTHON SOURCE LINES 13-44

Install Python
--------------

An installation of Python version 3.10 or higher is required to use the
PhasorPy library.
Python is an easy to learn, powerful programming language.
Python installers can be obtained from, for example,
`Python.org <https://www.python.org/downloads/>`_ or
`Anaconda.com <https://www.anaconda.com/>`_.
Refer to the `Python Tutorial <https://docs.python.org/3/tutorial/>`_
for an introduction to Python.

Install PhasorPy
----------------

To download and install the PhasorPy library and all its dependencies from
the `Python Package Index <https://pypi.org/project/phasorpy/>`_ (PyPI),
run the following command on a command prompt, shell or terminal::

    python -m pip install -U "phasorpy[all]"

.. note::
   The PhasorPy library is in its early stages of development
   and has not yet been released to PyPI.
   The development version of PhasorPy can be `installed manually
   <https://packaging.python.org/en/latest/tutorials/installing-packages/>`_,
   for example, using the binary wheels from `GitHub Actions
   <https://github.com/phasorpy/phasorpy/actions/workflows/build_wheels.yml>`_,
   or the source code on GitHub (requires a C compiler)::

       python -m pip install git+https://github.com/phasorpy/phasorpy.git

.. GENERATED FROM PYTHON SOURCE LINES 46-51

Import phasorpy
---------------

Start the Python interpreter, import the ``phasorpy`` package,
and print its version:

.. GENERATED FROM PYTHON SOURCE LINES 51-56

.. code-block:: Python


    import phasorpy

    print(phasorpy.__version__)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    0.1.dev




.. GENERATED FROM PYTHON SOURCE LINES 57-68

Read signal from file
---------------------

The :py:mod:`phasorpy.datasets` module provides access to various sample
files, for example, a TIFF file containing a time-correlated
single photon counting (TCSPC) histogram obtained at 80 MHz.

The :py:mod:`phasorpy.io` module provides many functions to read
time-resolved and hyperspectral image and metadata from file formats used
in microscopy. However, here the
`tifffile <https://pypi.org/project/tifffile/>`_ library is used directly:

.. GENERATED FROM PYTHON SOURCE LINES 68-80

.. code-block:: Python


    # TODO: use phasorpy.io function to read histogram and metadata from PTU file

    import tifffile

    from phasorpy.datasets import fetch

    signal = tifffile.imread(fetch('Embryo.tif'))
    frequency = 80.0

    print(signal.shape, signal.dtype)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    (56, 512, 512) uint16




.. GENERATED FROM PYTHON SOURCE LINES 81-82

Plot the spatial and histogram averages:

.. GENERATED FROM PYTHON SOURCE LINES 82-87

.. code-block:: Python


    from phasorpy.plot import plot_signal_image

    plot_signal_image(signal, axis=0)




.. image-sg:: /tutorials/images/sphx_glr_phasorpy_introduction_001.png
   :alt: mean, axis 0, mean
   :srcset: /tutorials/images/sphx_glr_phasorpy_introduction_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 88-96

Calculate phasor coordinates
----------------------------

The :py:mod:`phasorpy.phasor` module provides functions to calculate,
convert, and correct phasor coordinates.

Phasor coordinate are calculated from the signal, a TCSPC histogram in
this case. The histogram samples are in the first dimension (`axis=0`):

.. GENERATED FROM PYTHON SOURCE LINES 96-101

.. code-block:: Python


    from phasorpy.phasor import phasor_from_signal

    mean, real, imag = phasor_from_signal(signal, axis=0)








.. GENERATED FROM PYTHON SOURCE LINES 102-103

Plot the calculated phasor coordinates:

.. GENERATED FROM PYTHON SOURCE LINES 103-108

.. code-block:: Python


    from phasorpy.plot import plot_phasor_image

    plot_phasor_image(mean, real, imag)




.. image-sg:: /tutorials/images/sphx_glr_phasorpy_introduction_002.png
   :alt: mean, G, real, S, imag
   :srcset: /tutorials/images/sphx_glr_phasorpy_introduction_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 109-117

Calibrate phasor coordinates
----------------------------

Phasor coordinates from time-resolved measurements must be calibrated
with coordinates obtained from a reference standard of known lifetime,
acquired with the same instrument settings.

Read the signal of the reference measurement from a file:

.. GENERATED FROM PYTHON SOURCE LINES 117-120

.. code-block:: Python


    reference_signal = tifffile.imread(fetch('Fluorescein_Embryo.tif'))








.. GENERATED FROM PYTHON SOURCE LINES 121-122

Calculate phasor coordinates from the measured reference signal:

.. GENERATED FROM PYTHON SOURCE LINES 122-127

.. code-block:: Python


    reference_mean, reference_real, reference_imag = phasor_from_signal(
        reference_signal, axis=0
    )








.. GENERATED FROM PYTHON SOURCE LINES 128-130

Calibrate the raw phasor coordinates with the reference coordinates of known
lifetime (Fluorescein, 4.2 ns):

.. GENERATED FROM PYTHON SOURCE LINES 130-142

.. code-block:: Python


    from phasorpy.phasor import phasor_calibrate

    real, imag = phasor_calibrate(
        real,
        imag,
        reference_real,
        reference_imag,
        frequency=frequency,
        lifetime=4.2,
    )








.. GENERATED FROM PYTHON SOURCE LINES 143-148

Filter phasor coordinates
-------------------------

Applying median filter to the calibrated phasor coordinates,
often multiple times, improves contrast:

.. GENERATED FROM PYTHON SOURCE LINES 148-156

.. code-block:: Python


    # TODO: replace this with a ``phasor_filter`` function?
    from skimage.filters import median

    for _ in range(2):
        real = median(real)
        imag = median(imag)








.. GENERATED FROM PYTHON SOURCE LINES 157-159

Pixels with low intensities are commonly excluded from analysis and
visualization of phasor coordinates:

.. GENERATED FROM PYTHON SOURCE LINES 159-165

.. code-block:: Python


    # TODO: replace this with a ``phasor_mask`` function?
    mask = mean > 1
    real = real[mask]
    imag = imag[mask]








.. GENERATED FROM PYTHON SOURCE LINES 166-174

Plot phasor coordinates
-----------------------

The :py:mod:`phasorpy.plot` module provides functions and classes for
plotting phasor and polar coordinates.

Large number of phasor coordinates, such as obtained from imaging,
are commonly visualized as 2D histograms:

.. GENERATED FROM PYTHON SOURCE LINES 174-183

.. code-block:: Python


    from phasorpy.plot import PhasorPlot

    plot = phasorpy.plot.PhasorPlot(
        frequency=frequency, title='Calibrated, filtered phasor coordinates'
    )
    plot.hist2d(real, imag)
    plot.show()




.. image-sg:: /tutorials/images/sphx_glr_phasorpy_introduction_003.png
   :alt: Calibrated, filtered phasor coordinates
   :srcset: /tutorials/images/sphx_glr_phasorpy_introduction_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 184-185

For comparison, the uncalibrated, unfiltered phasor coordinates:

.. GENERATED FROM PYTHON SOURCE LINES 185-191

.. code-block:: Python


    plot = PhasorPlot(allquadrants=True, title='Raw phasor coordinates')
    plot.hist2d(*phasor_from_signal(signal, axis=0)[1:])
    plot.semicircle()
    plot.show()




.. image-sg:: /tutorials/images/sphx_glr_phasorpy_introduction_004.png
   :alt: Raw phasor coordinates
   :srcset: /tutorials/images/sphx_glr_phasorpy_introduction_004.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 192-194

To be continued
---------------

.. GENERATED FROM PYTHON SOURCE LINES 196-200

Appendix
--------

Print information about Python interpreter and installed packages:

.. GENERATED FROM PYTHON SOURCE LINES 200-203

.. code-block:: Python


    print(phasorpy.versions())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Python-3.11.9
    phasorpy-0.1.dev
    numpy-1.26.4
    tifffile-2024.5.10
    imagecodecs-n/a
    lfdfiles-2024.4.24
    sdtfile-2024.4.24
    ptufile-2024.4.24
    matplotlib-3.9.0
    scipy-1.13.0
    skimage-0.23.2
    sklearn-n/a
    pandas-2.2.2
    xarray-2024.5.0
    click-8.1.7
    pooch-v1.8.1




.. GENERATED FROM PYTHON SOURCE LINES 204-205

sphinx_gallery_thumbnail_number = 3


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 8.128 seconds)


.. _sphx_glr_download_tutorials_phasorpy_introduction.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: phasorpy_introduction.ipynb <phasorpy_introduction.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: phasorpy_introduction.py <phasorpy_introduction.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
